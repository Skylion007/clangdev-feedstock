From 495906f3cfdb1526fd209c9b6daeae2e6f94f040 Mon Sep 17 00:00:00 2001
From: Patrick Gartung <gartung@fnal.gov>
Date: Wed, 9 Aug 2017 16:30:34 -0500
Subject: [PATCH 105/110] Fix type printing of array template args Apply patch
 to interpreter/llvm/src/tools/clang/lib/AST/TemplateBase.cpp as suggested
 here: https://reviews.llvm.org/D36368

---
 lib/AST/TemplateBase.cpp | 19 ++++++++++++++++---
 1 file changed, 16 insertions(+), 3 deletions(-)

diff --git a/lib/AST/TemplateBase.cpp b/lib/AST/TemplateBase.cpp
index d4a5aad649..08e41393cd 100644
--- a/lib/AST/TemplateBase.cpp
+++ b/lib/AST/TemplateBase.cpp
@@ -411,10 +411,23 @@ void TemplateArgument::print(const PrintingPolicy &Policy,
   }
 
   case Declaration: {
-    NamedDecl *ND = getAsDecl();
-    Out << '&';
+    NamedDecl *ND = cast<NamedDecl>(getAsDecl());
+    bool needsRef = true;
+    if (auto VD = dyn_cast<ValueDecl>(ND)) {
+      const clang::Type *ArgTy = VD->getType()->getUnqualifiedDesugaredType();
+      const clang::Type *ParmTy
+        = getParamTypeForDecl()->getUnqualifiedDesugaredType();
+      clang::ASTContext& Ctx = ND->getASTContext();
+      needsRef = !Ctx.hasSameType(ArgTy, ParmTy);
+      if (needsRef && (ArgTy->isArrayType() || ArgTy->isFunctionType())) {
+        const clang::Type *decayedArgTy
+          = Ctx.getDecayedType(clang::QualType(ArgTy, 0)).getTypePtr();
+        needsRef = !Ctx.hasSameType(decayedArgTy, ParmTy);
+      }
+    }
+    if (needsRef)
+      Out << '&';
     if (ND->getDeclName()) {
-      // FIXME: distinguish between pointer and reference args?
       ND->printQualifiedName(Out);
     } else {
       Out << "(anonymous)";
-- 
2.29.2

